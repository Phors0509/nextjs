"use strict";(self.webpackChunkmy_app_gaming=self.webpackChunkmy_app_gaming||[]).push([[735],{"./src/components/requiredTest/requiredTest.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EmptyForm:()=>EmptyForm,FilledForm:()=>FilledForm,InvalidEmail:()=>InvalidEmail,InvalidEmailAndPassword:()=>InvalidEmailAndPassword,InvalidPassword:()=>InvalidPassword,__namedExportsOrder:()=>__namedExportsOrder,default:()=>requiredTest_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),index_esm=(__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs")),yup=__webpack_require__("./node_modules/@hookform/resolvers/yup/dist/yup.mjs"),yup_index_esm=__webpack_require__("./node_modules/yup/index.esm.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");function cov_2npr2dseqq(){var path="C:\\Users\\Pc\\Documents\\Code\\sst\\nextjs\\src\\components\\requiredTest\\requiredTest.tsx",global=new Function("return this")(),gcv="__coverage__",coverage=global[gcv]||(global[gcv]={});coverage[path]&&"0f81457d2e1c855cee7b9ad83dc4eab0baeb7197"===coverage[path].hash||(coverage[path]={path:"C:\\Users\\Pc\\Documents\\Code\\sst\\nextjs\\src\\components\\requiredTest\\requiredTest.tsx",statementMap:{0:{start:{line:7,column:15},end:{line:10,column:2}},1:{start:{line:11,column:21},end:{line:51,column:1}},2:{start:{line:13,column:62},end:{line:15,column:6}},3:{start:{line:16,column:21},end:{line:18,column:5}},4:{start:{line:17,column:8},end:{line:17,column:26}},5:{start:{line:19,column:4},end:{line:50,column:7}},6:{start:{line:53,column:0},end:{line:57,column:2}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:11,column:21},end:{line:11,column:22}},loc:{start:{line:11,column:25},end:{line:51,column:1}},line:11},1:{name:"(anonymous_1)",decl:{start:{line:16,column:21},end:{line:16,column:22}},loc:{start:{line:16,column:29},end:{line:18,column:5}},line:16}},branchMap:{0:{loc:{start:{line:29,column:34},end:{line:29,column:134}},type:"cond-expr",locations:[{start:{line:29,column:104},end:{line:29,column:110}},{start:{line:29,column:113},end:{line:29,column:134}}],line:29},1:{loc:{start:{line:29,column:34},end:{line:29,column:101}},type:"binary-expr",locations:[{start:{line:29,column:34},end:{line:29,column:73}},{start:{line:29,column:77},end:{line:29,column:101}}],line:29},2:{loc:{start:{line:41,column:34},end:{line:41,column:146}},type:"cond-expr",locations:[{start:{line:41,column:113},end:{line:41,column:119}},{start:{line:41,column:122},end:{line:41,column:146}}],line:41},3:{loc:{start:{line:41,column:34},end:{line:41,column:110}},type:"binary-expr",locations:[{start:{line:41,column:34},end:{line:41,column:79}},{start:{line:41,column:83},end:{line:41,column:110}}],line:41}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},f:{0:0,1:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0]},inputSourceMap:{version:3,sources:["C:/Users/Pc/Documents/Code/sst/nextjs/src/components/requiredTest/requiredTest.tsx"],sourcesContent:['"use client";\r\nimport React from "react";\r\nimport { useForm } from "react-hook-form";\r\nimport { yupResolver } from "@hookform/resolvers/yup";\r\nimport * as yup from "yup";\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup\r\n        .string()\r\n        .email("Invalid email format")\r\n        .required("Email is required"),\r\n    password: yup\r\n        .string()\r\n        .min(6, "Password must be at least 6 characters")\r\n        .required("Password is required"),\r\n});\r\n\r\nconst RequiredTest = () => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const onSubmit = (data: any) => {\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <input {...register("email")} placeholder="email" />\r\n                <p>{errors.email?.message}</p>\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type="password"\r\n                    {...register("password")}\r\n                    placeholder="password"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n            </div>\r\n            <button type="submit">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default RequiredTest;\r\n'],names:["React","useForm","yupResolver","yup","schema","object","shape","email","string","required","password","min","RequiredTest","errors","register","handleSubmit","formState","resolver","onSubmit","data","console","log","form","div","input","placeholder","p","message","type","button"],mappings:"AAAA;;AACA,OAAOA,WAAW,QAAQ;AAC1B,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,WAAW,QAAQ,0BAA0B;AACtD,YAAYC,SAAS,MAAM;AAE3B,MAAMC,SAASD,IAAIE,MAAM,GAAGC,KAAK,CAAC;IAC9BC,OAAOJ,IACFK,MAAM,GACND,KAAK,CAAC,wBACNE,QAAQ,CAAC;IACdC,UAAUP,IACLK,MAAM,GACNG,GAAG,CAAC,GAAG,0CACPF,QAAQ,CAAC;AAClB;AAEA,MAAMG,eAAe;QAiBDC,eAQAA;IAxBhB,MAAM,EACFC,QAAQ,EACRC,YAAY,EACZC,WAAW,EAAEH,MAAM,EAAE,EACxB,GAAGZ,QAAQ;QACRgB,UAAUf,YAAYE;IAC1B;IAEA,MAAMc,WAAW,CAACC;QACdC,QAAQC,GAAG,CAACF;IAChB;IAEA,qBACI,MAACG;QAAKJ,UAAUH,aAAaG;;0BACzB,MAACK;;kCACG,KAACC;wBAAO,GAAGV,SAAS,QAAQ;wBAAEW,aAAY;;kCAC1C,KAACC;mCAAGb,gBAAAA,OAAON,KAAK,cAAZM,oCAAAA,cAAcc,OAAO;;;;0BAE7B,MAACJ;;kCACG,KAACC;wBACGI,MAAK;wBACJ,GAAGd,SAAS,WAAW;wBACxBW,aAAY;;kCAEhB,KAACC;mCAAGb,mBAAAA,OAAOH,QAAQ,cAAfG,uCAAAA,iBAAiBc,OAAO;;;;0BAEhC,KAACE;gBAAOD,MAAK;0BAAS;;;;AAGlC;AAEA,eAAehB,aAAa"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0f81457d2e1c855cee7b9ad83dc4eab0baeb7197"});var actualCoverage=coverage[path];return cov_2npr2dseqq=function(){return actualCoverage},actualCoverage}cov_2npr2dseqq();const schema=(cov_2npr2dseqq().s[0]++,yup_index_esm.Ik().shape({email:yup_index_esm.Yj().email("Invalid email format").required("Email is required"),password:yup_index_esm.Yj().min(6,"Password must be at least 6 characters").required("Password is required")}));cov_2npr2dseqq().s[1]++;const RequiredTest=()=>{var _errors_email,_errors_password;cov_2npr2dseqq().f[0]++;const{register,handleSubmit,formState:{errors}}=(cov_2npr2dseqq().s[2]++,(0,index_esm.mN)({resolver:(0,yup.t)(schema)}));cov_2npr2dseqq().s[3]++;return cov_2npr2dseqq().s[5]++,(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((data=>{cov_2npr2dseqq().f[1]++,cov_2npr2dseqq().s[4]++,console.log(data)})),children:[(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{...register("email"),placeholder:"email"}),(0,jsx_runtime.jsx)("p",{children:(cov_2npr2dseqq().b[1][0]++,null===(_errors_email=errors.email)||(cov_2npr2dseqq().b[1][1]++,void 0===_errors_email)?void cov_2npr2dseqq().b[0][0]++:(cov_2npr2dseqq().b[0][1]++,_errors_email.message))})]}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{type:"password",...register("password"),placeholder:"password"}),(0,jsx_runtime.jsx)("p",{children:(cov_2npr2dseqq().b[3][0]++,null===(_errors_password=errors.password)||(cov_2npr2dseqq().b[3][1]++,void 0===_errors_password)?void cov_2npr2dseqq().b[2][0]++:(cov_2npr2dseqq().b[2][1]++,_errors_password.message))})]}),(0,jsx_runtime.jsx)("button",{type:"submit",children:"Submit"})]})},requiredTest=RequiredTest;cov_2npr2dseqq().s[6]++,RequiredTest.__docgenInfo={description:"",methods:[],displayName:"RequiredTest"};const requiredTest_stories={component:requiredTest,tags:["autodocs"]},FilledForm={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email@email.com",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"ExamplePassword",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},EmptyForm={play:async({canvasElement})=>{const submitButton=(0,dist.ux)(canvasElement).getByRole("button");await dist.Q4.click(submitButton)}},InvalidEmail={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"ExamplePassword",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},InvalidPassword={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email@email.com",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"Exame",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},InvalidEmailAndPassword={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"Exame",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},__namedExportsOrder=["FilledForm","EmptyForm","InvalidEmail","InvalidPassword","InvalidEmailAndPassword"];FilledForm.parameters={...FilledForm.parameters,docs:{...FilledForm.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email@email.com", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "ExamplePassword", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...FilledForm.parameters?.docs?.source}}},EmptyForm.parameters={...EmptyForm.parameters,docs:{...EmptyForm.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...EmptyForm.parameters?.docs?.source}}},InvalidEmail.parameters={...InvalidEmail.parameters,docs:{...InvalidEmail.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "ExamplePassword", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidEmail.parameters?.docs?.source}}},InvalidPassword.parameters={...InvalidPassword.parameters,docs:{...InvalidPassword.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email@email.com", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "Exame", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidPassword.parameters?.docs?.source}}},InvalidEmailAndPassword.parameters={...InvalidEmailAndPassword.parameters,docs:{...InvalidEmailAndPassword.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "Exame", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidEmailAndPassword.parameters?.docs?.source}}}}}]);