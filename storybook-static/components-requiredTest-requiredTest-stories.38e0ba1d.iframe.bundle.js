"use strict";(self.webpackChunkmy_app_gaming=self.webpackChunkmy_app_gaming||[]).push([[735],{"./src/components/requiredTest/requiredTest.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EmptyForm:()=>EmptyForm,FilledForm:()=>FilledForm,InvalidEmail:()=>InvalidEmail,InvalidEmailAndPassword:()=>InvalidEmailAndPassword,InvalidPassword:()=>InvalidPassword,__namedExportsOrder:()=>__namedExportsOrder,default:()=>requiredTest_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),index_esm=(__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs")),yup=__webpack_require__("./node_modules/@hookform/resolvers/yup/dist/yup.mjs"),yup_index_esm=__webpack_require__("./node_modules/yup/index.esm.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const schema=yup_index_esm.Ik().shape({email:yup_index_esm.Yj().email("Invalid email format").required("Email is required"),password:yup_index_esm.Yj().min(6,"Password must be at least 6 characters").required("Password is required")}),RequiredTest=()=>{var _errors_email,_errors_password;const{register,handleSubmit,formState:{errors}}=(0,index_esm.mN)({resolver:(0,yup.t)(schema)});return(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((data=>{console.log(data)})),children:[(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{...register("email"),placeholder:"email"}),(0,jsx_runtime.jsx)("p",{children:null===(_errors_email=errors.email)||void 0===_errors_email?void 0:_errors_email.message})]}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{type:"password",...register("password"),placeholder:"password"}),(0,jsx_runtime.jsx)("p",{children:null===(_errors_password=errors.password)||void 0===_errors_password?void 0:_errors_password.message})]}),(0,jsx_runtime.jsx)("button",{type:"submit",children:"Submit"})]})},requiredTest=RequiredTest;RequiredTest.__docgenInfo={description:"",methods:[],displayName:"RequiredTest"};const requiredTest_stories={component:requiredTest,tags:["autodocs"]},FilledForm={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email@email.com",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"ExamplePassword",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},EmptyForm={play:async({canvasElement})=>{const submitButton=(0,dist.ux)(canvasElement).getByRole("button");await dist.Q4.click(submitButton)}},InvalidEmail={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"ExamplePassword",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},InvalidPassword={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email@email.com",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"Exame",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},InvalidEmailAndPassword={play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),emailInput=canvas.getByPlaceholderText("email");await dist.Q4.type(emailInput,"example-email",{delay:100});const passwordInput=canvas.getByPlaceholderText("password");await dist.Q4.type(passwordInput,"Exame",{delay:100});const submitButton=canvas.getByRole("button");await dist.Q4.click(submitButton)}},__namedExportsOrder=["FilledForm","EmptyForm","InvalidEmail","InvalidPassword","InvalidEmailAndPassword"];FilledForm.parameters={...FilledForm.parameters,docs:{...FilledForm.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email@email.com", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "ExamplePassword", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...FilledForm.parameters?.docs?.source}}},EmptyForm.parameters={...EmptyForm.parameters,docs:{...EmptyForm.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...EmptyForm.parameters?.docs?.source}}},InvalidEmail.parameters={...InvalidEmail.parameters,docs:{...InvalidEmail.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "ExamplePassword", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidEmail.parameters?.docs?.source}}},InvalidPassword.parameters={...InvalidPassword.parameters,docs:{...InvalidPassword.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email@email.com", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "Exame", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidPassword.parameters?.docs?.source}}},InvalidEmailAndPassword.parameters={...InvalidEmailAndPassword.parameters,docs:{...InvalidEmailAndPassword.parameters?.docs,source:{originalSource:'{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByPlaceholderText("email");\n    await userEvent.type(emailInput, "example-email", {\n      delay: 100\n    });\n    const passwordInput = canvas.getByPlaceholderText("password");\n    await userEvent.type(passwordInput, "Exame", {\n      delay: 100\n    });\n    const submitButton = canvas.getByRole("button");\n    await userEvent.click(submitButton);\n  }\n}',...InvalidEmailAndPassword.parameters?.docs?.source}}}}}]);